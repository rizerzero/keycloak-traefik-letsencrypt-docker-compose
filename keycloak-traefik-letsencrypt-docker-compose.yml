# Keycloak with Let's Encrypt in a Docker Compose

# Vladimir Mikhalev
# callvaldemar@gmail.com
# www.heyvaldemar.com

# Install the Docker Engine by following the official guide: https://docs.docker.com/engine/install/
# Install the Docker Compose by following the official guide: https://docs.docker.com/compose/install/

# Run keycloak-restore-database.sh to restore database if needed.

# Deploy Keycloak server with a Docker Compose using the command:
# docker-compose -f keycloak-traefik-letsencrypt-docker-compose.yml -p keycloak up -d

version: '3.8'

volumes:
  keycloak-postgres:
  keycloak-postgres-backups:
  traefik-certificates:

services:
  postgres:
    # Image tag (replace with yours)
    image: postgres:12.5
    volumes:
      - keycloak-postgres:/var/lib/postgresql/data
    environment:
      # Database name (replace with yours)
      POSTGRES_DB: keycloakdb
      # Database user (replace with yours)
      POSTGRES_USER: keycloakdbuser
      # Database password (replace with yours)
      POSTGRES_PASSWORD: EqhvLbsPhrkkZjcaGWcV7qT
    restart: unless-stopped

  keycloak:
    # Image tag (replace with yours)
    image: jboss/keycloak:12.0.2
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_PORT: 5432
      # Database name (replace with yours)
      DB_DATABASE: keycloakdb
      # Database user (replace with yours)
      DB_USER: keycloakdbuser
      # Database password (replace with yours)
      DB_PASSWORD: EqhvLbsPhrkkZjcaGWcV7qT
      # Keycloak user (replace with yours)
      KEYCLOAK_USER: keycloakadmin
      # Keycloak password (replace with yours)
      KEYCLOAK_PASSWORD: rwXPqspCABJzqh47i723wf9
      JGROUPS_DISCOVERY_PROTOCOL: JDBC_PING
      JGROUPS_DISCOVERY_PROPERTIES: datasource_jndi_name=java:jboss/datasources/KeycloakDS,info_writer_sleep_time=500,initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
      PROXY_ADDRESS_FORWARDING: 'true'
      KEYCLOAK_LOGLEVEL: WARN
    labels:
      - "traefik.enable=true"
      # Keycloak URL (replace with yours)
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.heyvaldemar.net`)"
      - "traefik.http.routers.keycloak.service=keycloak"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.services.keycloak.loadbalancer.passhostheader=true"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    restart: unless-stopped
    depends_on:
      - postgres
      - traefik

  traefik:
    # Image tag (replace with yours)
    image: traefik:2.4
    command:
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
      - "--api=true"
      - "--log.level=WARN"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=callvaldemar@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    ports:
      - "80:80"
      - "443:443"
    labels:
      - "traefik.enable=true"
      # Traefik URL (replace with yours)
      - "traefik.http.routers.default.rule=Host(`traefik.keycloak.heyvaldemar.net`)"
      - "traefik.http.routers.default.service=api@internal"
      - "traefik.http.routers.default.tls.certresolver=letsencrypt"
      - "traefik.http.routers.default.entrypoints=websecure"
      - "traefik.http.services.default.loadbalancer.passhostheader=true"
      - "traefik.http.services.default.loadbalancer.server.port=8080"
      - "traefik.http.routers.default.middlewares=authtraefik"
      # Basic Authentication for Traefik Dashboard
      # Username: traefikadmin (replace with yours)
      # Passwords must be encoded using MD5, SHA1, or BCrypt
      - "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$2y$$10$$sMzJfirKC75x/hVpiINeZOiSm.Jkity9cn4KwNkRvO7hSQVFc5FLO"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    # Image tag (replace with yours)
    image: postgres:12.5
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/keycloak-postgres/backups -type f -mtime +7 | xargs rm -f

    # Keycloak backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run keycloak-restore-database.sh to restore database if needed.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(echo $$POSTGRES_PASSWORD)"
             pg_dump
             -h postgres
             -p 5432
             -d keycloakdb
             -U keycloakdbuser | gzip > /srv/keycloak-postgres/backups/keycloak-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && find /srv/keycloak-postgres/backups -type f -mtime +7 | xargs rm -f
             sleep 24h; done'
    volumes:
      # Database backups location
      - keycloak-postgres-backups:/srv/keycloak-postgres/backups
    environment:
      # Database password (replace with yours)
      POSTGRES_PASSWORD: EqhvLbsPhrkkZjcaGWcV7qT
    restart: unless-stopped
    depends_on:
      - postgres
      - keycloak
